(SEEMINGLY) SOLVED

Error when trying to run the sorting program.

Main problem: "warning: enum constant in boolean context"

Root is installed properly and reachable by "$root" as usual.
Make file uses g++

$ g++ --version
g++ (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0
....



FULL ERROR OUTPUT:


.../sorting$ make
       [CXX] user_sort.cpp
user_sort.cpp: In member function ‘virtual bool UserXY::Sort(const Event&)’:
user_sort.cpp:486:7: warning: variable ‘weight’ set but not used [-Wunused-but-set-variable]
   int weight = 1;
       ^~~~~~
user_sort.cpp:330:61: warning: ‘id_b’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     m_back->Fill( (int)calib( raw, gain_e[8*id_b], shift_e[8*id_b] ), id_b );
                                                            ~^~~~~
user_sort.cpp:330:29: warning: ‘raw’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     m_back->Fill( (int)calib( raw, gain_e[8*id_b], shift_e[8*id_b] ), id_b );
                        ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
make -C lib libsorting.a
make[1]: Entering directory '/home/marianne/Documents/master/expermiment/sorting/lib'
 [other CXX] Histogram2D.cpp
 [other CXX] Unpacker.cpp
Unpacker.cpp: In member function ‘bool Unpacker::UnpackOneEvent(unsigned int, Event&)’:
Unpacker.cpp:47:24: warning: enum constant in boolean context [-Wint-in-bool-context]
                 return ERROR;
                        ^~~~~
Unpacker.cpp:51:24: warning: enum constant in boolean context [-Wint-in-bool-context]
                 return ERROR;
                        ^~~~~
Unpacker.cpp:54:24: warning: enum constant in boolean context [-Wint-in-bool-context]
                 return ERROR;
                        ^~~~~
Unpacker.cpp:59:24: warning: enum constant in boolean context [-Wint-in-bool-context]
                 return ERROR;
                        ^~~~~
Unpacker.cpp:62:24: warning: enum constant in boolean context [-Wint-in-bool-context]
                 return ERROR;
                        ^~~~~
 [other CXX] FileReader.cpp
 [other CXX] RateMeter.cpp
 [other CXX] SiriusRoutine.cpp
SiriusRoutine.cpp: In function ‘bool set_par(Parameters&, std::istream&, const string&, int)’:
SiriusRoutine.cpp:92:12: error: cannot convert ‘std::istream {aka std::basic_istream<char>}’ to ‘bool’ in return
     return ipar;
            ^~~~
Makefile:77: recipe for target 'SiriusRoutine.o' failed
make[1]: *** [SiriusRoutine.o] Error 1
make[1]: Leaving directory '/home/marianne/Documents/master/expermiment/sorting/lib'
Makefile:80: recipe for target 'lib/libsorting.a' failed
make: *** [lib/libsorting.a] Error 2
.../sorting$ 


Possible solutions:
https://stackoverflow.com/questions/38659115/make-fails-with-error-cannot-convert-stdistream-aka-stdbasic-istreamchar
http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1402

Seems to be a "bool" conversion problem. Might be Eigen.

Tried to install newest version of Eigen(3.3.7) from http://eigen.tuxfamily.org/index.php?title=Main_Page

Didn't seem to work yet..

Additional problem:
ipar cannot be converted to 'bool'

All occurances of ipar:

.../sorting$ grep -rnw '.' -e 'ipar'
./lib/Parameters.cpp:136:    std::istringstream ipar(values.c_str());
./lib/Parameters.cpp:138:    std::copy(std::istream_iterator<float>(ipar), std::istream_iterator<float>(),
./lib/SiriusRoutine.cpp:81:static bool set_par(Parameters& parameters, std::istream& ipar,
./lib/SiriusRoutine.cpp:92:        ipar >> tmp;
./lib/SiriusRoutine.cpp:100:    return ipar;
./lib/SiriusRoutine.cpp:103:static bool set_gainshift(Parameters& parameters, std::istream& ipar)
./lib/SiriusRoutine.cpp:105:    return set_par(parameters, ipar, "gain_e",    64 )
./lib/SiriusRoutine.cpp:106:        && set_par(parameters, ipar, "gain_de",   64 )
./lib/SiriusRoutine.cpp:107:        && set_par(parameters, ipar, "gain_ge",    6 )
./lib/SiriusRoutine.cpp:108:        && set_par(parameters, ipar, "gain_na",   32 )
./lib/SiriusRoutine.cpp:109:        && set_par(parameters, ipar, "shift_e",   64 )
./lib/SiriusRoutine.cpp:110:        && set_par(parameters, ipar, "shift_de",  64 )
./lib/SiriusRoutine.cpp:111:        && set_par(parameters, ipar, "shift_ge",   6 )
./lib/SiriusRoutine.cpp:112:        && set_par(parameters, ipar, "shift_na",  32 )
./lib/SiriusRoutine.cpp:113:        && set_par(parameters, ipar, "shift_tge",  6 )
./lib/SiriusRoutine.cpp:114:        && set_par(parameters, ipar, "shift_tna", 32 )
./lib/SiriusRoutine.cpp:115:        && set_par(parameters, ipar, "gain_tge",   6 )
./lib/SiriusRoutine.cpp:116:        && set_par(parameters, ipar, "gain_tna",  32 );
.../sorting$ 


After looking more thoroughly at the code in question:

The class:
static bool set_par(Parameters& parameters, std::istream& ipar,
                    const std::string& name, int size)
{
    Parameter* p = parameters.Find(name);
    if( !p )
        return false;

    std::vector<Parameter::param_t> values;
    float tmp;
    for(int i=0; i<size; ++i) {
        tmp = 0;
        ipar >> tmp; //this bitwise right shifts ipar by tmp bits.
        values.push_back(tmp);
    }
    p->Set( values );
    return ipar;
}

ipar is of type defined as: std::istringstream ipar(values.c_str()); 
       later copied as: std::istream_iterator<float>(ipar)

How can this turn into a bool?
The function gets ipar, bit shiftes is by tmp, (i=0; i<size; ++i), so size times.

Possible solution:
https://stackoverflow.com/questions/20169987/using-stringstream-to-input-output-a-bool-value


SOLUTION:
Use current/newer version of the sorting program!
See the forked project from the Oslo Cyclotron lab:
https://github.com/Loopdiloop/usersort

The problem was seemingly in the function above (static bool set_par), but in the new version it was dramatically changed to return true/false, not ipar itself (which isn't possibly a bool w/ newer compilers..)

This fixed most of the problem and the programs now runs after minor bug fixes.
For example had this (https://root-forum.cern.ch/t/solved-libcore-so-cannot-open-shared-object-file-no-such/12593)
problem, where the solution worked for the corresponding bug. (libCore.so not found)

The only bug left that I am aware of is general warnings for enum to bool. 
(Eg. Unpacker.cpp:71:24: warning: enum constant in boolean context [-Wint-in-bool-context]
                 return ERROR;
                        ^~~~~ )
Still runs. Solved for now :)
